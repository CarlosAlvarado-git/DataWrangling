generate_df <-  function(x){ return(
data.frame(
a = sample(letters, size = 10, replace = TRUE),
b = sample(1:10, size = 10, replace = TRUE)
)
)
}
generate_df(3)
generate_df(3)
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
lista <- lapply(1:4, generate_df)
View(lista)
lista
generate_df <-  function(x, tamanio){ return(
data.frame(
a = sample(letters, size = tamanio, replace = TRUE),
b = sample(1:10, size = tamanio, replace = TRUE)
)
)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
lista <- lapply(1:4, generate_df, tamanio = 4)
lista
View(lista)
library(tibble)
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
generate_df <-  function(fecha, rowss){
add_column(dataset, d = 4:8, .after = 2)
}
add_column(dataset, d = 4:8, .after = 2)
add_column(d = 4:8, .after = 2)
fechas <- seq("01-2028", 12)
fechas <- seq("01-2028")
fechas <- rep("01-2028", 5)
generate_df <-  function(data_, fecha, rowss){
fechas <- rep(fecha, rowss)
data_ <- add_column(data_, fechas, .before = 1)
return (data_)
}
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
generate_df <-  function(data_, fecha, rowss){
fechas <- rep(fecha, rowss)
data_ <- add_column(data_, fechas, .before = 1)
return (data_)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
dataset <- lapply(dataset, generate_df, fecha = "01-2018",rowss = nrow(dataset))
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
dataset <- lapply(dataset, generate_df, fecha = "01-2018",rowss = nrows(dataset))
nrow(dataset)
a <- nrow(dataset)
a
b <- a[1]
a <- nrow(.dataset)
a <- nrow(dataset)
b <- a[1]
library(tibble)
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
a <- as.numeric(  nrow(dataset))
library(tibble)
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
generate_df <-  function(data_, fecha, rowss){
fechas <- rep(fecha, rowss)
data_ <- add_column(data_, fechas, .before = 1)
return (data_)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
dataset <- lapply(dataset, generate_df, fecha = "01-2018",rowss = as.numeric(nrow(dataset)))
generate_df <-  function(x,data_, fecha, rowss){
fechas <- rep(fecha, rowss)
data_ <- add_column(data_, fechas, .before = 1)
return (data_)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
dataset <- lapply(1,dataset, generate_df, fecha = "01-2018",rowss = as.numeric(nrow(dataset)))
library(tibble)
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
generate_df <-  function(x,data_, fecha, rowss){
fechas <- rep(fecha, rowss)
data_ <- add_column(data_, fechas, .before = 1)
return (data_)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
dataset <- lapply(1,dataset, generate_df, fecha = "01-2018",rowss = as.numeric(nrow(dataset)))
View(dataset)
generate_df <-  function(x, tamanio){ return(
data.frame(
a = sample(letters, size = tamanio, replace = TRUE),
b = sample(1:10, size = tamanio, replace = TRUE)
)
)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
lista <- lapply(1:4, generate_df, tamanio = 4)
View(lista)
generate_df <-  function(tamanio){ return(
data.frame(
a = sample(letters, size = tamanio, replace = TRUE),
b = sample(1:10, size = tamanio, replace = TRUE)
)
)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
lista <- lapply(4, generate_df)
generate_df <-  function(tamanio){ return(
data.frame(
a = sample(letters, size = tamanio, replace = TRUE),
b = sample(1:10, size = tamanio, replace = TRUE)
)
)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
lista <- lapply(4, generate_df)
View(lista)
generate_df <-  function(tamanio, x){ return(
data.frame(
a = sample(letters, size = tamanio, replace = TRUE),
b = sample(1:10, size = tamanio, replace = TRUE)
)
)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
a <- c(1,2,3)
lista <- lapply(4, generate_df, a)
View(lista)
library(tibble)
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
generate_df <-  function(data_, fecha, rowss){
fechas <- rep(fecha, rowss)
data_ <- add_column(data_, fechas, .before = 1)
return (data_)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
dataset <- lapply(dataset, generate_df, fecha = "01-2018",rowss = as.numeric(nrow(dataset)))
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
a <- as.numeric(nrow(dataset))
dataset <- lapply(dataset, generate_df, fecha = "01-2018",rowss = a)
dataset <- lapply(dataset, generate_df, fecha = "01-2018",rowss = a)
dataset <- lapply(dataset, generate_df, fecha = "01-2018",rowss = a)
dataset <- lapply(dataset, generate_df, fecha = "01-2018",rowss = a)
function (.data, ..., .before = NULL, .after = NULL, .name_repair = c("check_unique",
"unique", "universal", "minimal"))
{
if (!is.data.frame(.data)) {
deprecate_warn("2.1.1", "add_column(.data = 'must be a data frame')")
}
if (has_length(.data) && (!is_named(.data) || anyDuplicated(names2(.data))) &&
missing(.name_repair)) {
deprecate_warn("3.0.0", "add_column(.data = 'must have unique names')",
details = "Use `.name_repair = \"minimal\"`.")
.name_repair <- "minimal"
}
df <- tibble(..., .name_repair = .name_repair)
if (ncol(df) == 0L) {
return(.data)
}
if (nrow(df) != nrow(.data)) {
if (nrow(df) == 1) {
df <- df[rep(1L, nrow(.data)), ]
}
else {
cnd_signal(error_incompatible_new_cols(nrow(.data),
df))
}
}
pos <- pos_from_before_after_names(.before, .after, colnames(.data))
end_pos <- ncol(.data) + seq_len(ncol(df))
indexes_before <- rlang::seq2(1L, pos)
indexes_after <- rlang::seq2(pos + 1L, ncol(.data))
indexes <- c(indexes_before, end_pos, indexes_after)
new_data <- .data
new_data[end_pos] <- df
out <- new_data[indexes]
out <- set_repaired_names(out, repair_hint = TRUE, .name_repair)
vectbl_restore(out, .data)
}
source("~/Desktop/DataWrangling/Clase_3/Clase_3/clase_3_lapply_funciones.R")
library(tibble)
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
generate_df <-  function(data_, fecha, rowss){
fechas <- rep(fecha, rowss)
data_ <- add_column(data_, fechas, .before = 1)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
a <- as.numeric(nrow(dataset))
lapply(dataset, generate_df, fecha = "01-2018",rowss = a)
generate_df(c(1,2,3),"01-2018", 3)
generate_df <-  function(data_, fecha){
fechas <- rep(fecha, as.numeric(nrow(data_)))
data_ <- add_column(data_, fechas, .before = 1)
}
generate_df(c(1,2,3),"01-2018")
fechas <- rep(fecha, -as.numeric(nrow(data_)))
generate_df <-  function(data_, fecha){
fechas <- rep(fecha, -as.numeric(nrow(data_)))
data_ <- add_column(data_, fechas, .before = 1)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
a <- as.numeric(nrow(dataset))
lapply(dataset, generate_df, fecha = "01-2018")
type(a)
typeof(a)
fechas <- rep(fecha, as.numeric(nrow(data_)))
lapply(dataset, generate_df, fecha = "01-2018")
generate_df <-  function(data_, fecha){
fechas <- rep(fecha, as.numeric(nrow(data_)))
data_ <- add_column(data_, fechas, .before = 1)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
a <- as.numeric(nrow(dataset))
typeof(a)
lapply(dataset, generate_df, fecha = "01-2018")
generate_df <-  function(data_, fecha){
fechas <- rep(fecha, (nrow(data_)))
data_ <- add_column(data_, fechas, .before = 1)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
a <- as.numeric(nrow(dataset))
typeof(a)
lapply(dataset, generate_df, fecha = "01-2018")
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
a <- (nrow(dataset))
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
b <- 10
a <- as.numeric(nrow(dataset))
typeof(b)
typeof(a)
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
generate_df <-  function(data_, fecha){
a <- as.numeric(nrow(dataset))
fechas <- rep(fecha, a)
data_ <- add_column(data_, fechas, .before = 1)
}
#parecido por un for, es un ciclo que aplica a todos los elementos del vector.
# 1:4, recorre y realiza la función a cada dato que pongo en el primer parámetro
# el primer parámetro de lapply es el primer parámetro que recibe la función.
# luego pongo la función
# puedo agregar varios parámetros después
b <- 10
typeof()
lapply(dataset, generate_df, fecha = "01-2018")
a <- as.numeric(nrow(dataset))
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
a <- as.numeric(nrow(dataset))
fff <- rep("01-2018", a)
dataset <- add_column(dataset, fff, .before = 1)
View(dataset)
library(tibble)
dataset <- data.frame(a = 1:5, b = 2:6, c=3:7)
generate_df <-  function(data_, fecha){
a <- as.numeric(nrow(data_))
fechas <- rep(fecha, a)
data_ <- add_column(data_, fechas, .before = 1)
}
lapply(dataset, generate_df, fecha = "01-2018")
generate_df <-  function(data_, fecha){
a <- as.numeric(nrow(data_))
a
fechas <- rep(fecha, a)
data_ <- add_column(data_, fechas, .before = 1)
}
lapply(dataset, generate_df, fecha = "01-2018")
lapply(dataset, generate_df, fecha = "01-2018")
generate_df <-  function(data_, fecha){
a <- as.numeric(nrow(data_))
a
fechas <- rep(fecha, a)
data_ <- add_column(data_, fechas, .before = 1)
}
a <- as.numeric(nrow(data_))
lapply(dataset, generate_df, fecha = "01-2018")
a1 <- as.numeric(nrow(dataset))
fecha_ = "01-2018"
fff <- rep(fecha_, a1)
dataset <- add_column(dataset, fff, .before = 1)
View(dataset)
generate_df <-  function(tamanio, x){ return(
data.frame(
a = sample(letters, size = tamanio, replace = TRUE),
b = sample(1:10, size = tamanio, replace = TRUE)
)
)
}
lista <- lapply(4, generate_df, a)
View(lista)
lista <- lapply(4, generate_df,1:3)
generate_df <-  function(tamanio, x){ return(
b = sample(1:10, size = tamanio, replace = TRUE)
)
}
lista <- lapply(4, generate_df,1:3)
View(lista)
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create the vector with numbers.
v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
# Calculate the mode using the user function.
result <- getmode(v)
print(result)
